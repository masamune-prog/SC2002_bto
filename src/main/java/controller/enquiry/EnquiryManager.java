package controller.enquiry;
import repository.enquiry.EnquiryRepository;
import model.enquiry.Enquiry;
import utils.exception.ModelAlreadyExistsException;
import utils.exception.ModelNotFoundException;

import java.util.ArrayList;
import java.util.List;

/**
 * Manages enquiries, providing functionalities to create, retrieve, update, delete, and answer enquiries.
 * Interacts with the {@link EnquiryRepository} for data persistence.
 */
public class EnquiryManager {
    /**
     * Creates a new enquiry with a specified ID.
     *
     * @param enquiryID    The unique ID for the new enquiry.
     * @param enquiryTitle The title of the enquiry.
     * @param creatorID    The ID of the user creating the enquiry.
     * @param content      The content/question of the enquiry.
     * @param answer       The initial answer (can be null).
     * @param answered     The initial answered status.
     * @throws ModelAlreadyExistsException If an enquiry with the same ID already exists.
     */
   public static void createNewEnquiry(String enquiryID, String enquiryTitle, String creatorID, String content, String answer, Boolean answered) throws ModelAlreadyExistsException {
         // Create a new enquiry object
         Enquiry enquiry = new Enquiry(enquiryID, enquiryTitle, creatorID, content, answer, answered);
            // Add the enquiry to the database
            EnquiryRepository.getInstance().add(enquiry);

   }

    /**
     * Creates a new enquiry, automatically generating a unique ID.
     *
     * @param enquiryTitle The title of the enquiry.
     * @param creatorID    The ID of the user creating the enquiry.
     * @param content      The content/question of the enquiry.
     * @param answer       The initial answer (can be null).
     * @param answered     The initial answered status.
     * @return The generated unique ID for the newly created enquiry.
     * @throws ModelAlreadyExistsException If the generated ID somehow already exists (should be rare).
     */
    public static String createNewEnquiry( String enquiryTitle, String creatorID, String content, String answer, Boolean answered) throws ModelAlreadyExistsException {
        // Create a new enquiry object
        String enquiryID = EnquiryManager.getNewEnquiryID();
        System.out.println("Enquiry ID: " + enquiryID);
        Enquiry enquiry = new Enquiry(enquiryID, enquiryTitle, creatorID, content, answer, answered);
        // Add the enquiry to the database
        EnquiryRepository.getInstance().add(enquiry);
        return enquiryID;

    }

    /**
     * Retrieves an enquiry by its unique ID.
     *
     * @param enquiryID The ID of the enquiry to retrieve.
     * @return The {@link Enquiry} object.
     * @throws ModelNotFoundException If no enquiry with the specified ID is found.
     */
    public static Enquiry getEnquiryByID(String enquiryID) throws ModelNotFoundException {
            return EnquiryRepository.getInstance().getByID(enquiryID);
    }

    /**
     * Generates a new unique ID for an enquiry.
     * The ID is generated by finding the highest existing ID (e.g., "E1", "E2") and incrementing the number.
     * Starts with "E1" if the repository is empty.
     *
     * @return A new unique enquiry ID string (e.g., "E3").
     */
    public static String getNewEnquiryID() {
        // Generate a new enquiry ID based on the max ID in the repository
        //loop to check
        if(EnquiryRepository.getInstance().getAll().isEmpty()){
            return "E1"; // Start with E1 if no enquiries exist
        }
        String maxID = null;
        for (Enquiry enquiry : EnquiryRepository.getInstance().getAll()) {
            if (maxID == null || enquiry.getID().compareTo(maxID) > 0) {
                maxID = enquiry.getID();
            }
        }
        if (maxID == null) {
            return "E1"; // Start with E1 if no enquiries exist
        } else {
            int newID = Integer.parseInt(maxID.substring(1)) + 1; // Increment the ID
            return "E" + newID; // Return the new ID
        }
    }

    /**
     * Updates the question and answer of an existing enquiry.
     *
     * @param enquiryID The ID of the enquiry to update.
     * @param question  The new question/content for the enquiry.
     * @param answer    The new answer for the enquiry.
     * @throws ModelNotFoundException If no enquiry with the specified ID is found.
     */
    public static void updateEnquiry(String enquiryID, String question, String answer) throws ModelNotFoundException {
        Enquiry enquiry = EnquiryRepository.getInstance().getByID(enquiryID);
        if (enquiry != null) {
            enquiry.setContent(question);
            enquiry.setAnswer(answer);
            EnquiryRepository.getInstance().update(enquiry);
        } else {
            throw new ModelNotFoundException("Enquiry with ID " + enquiryID + " not found");
        }
    }

    /**
     * Deletes an enquiry from the repository.
     *
     * @param enquiryID The ID of the enquiry to delete.
     * @throws ModelNotFoundException If no enquiry with the specified ID is found.
     */
    public static void deleteEnquiry(String enquiryID) throws ModelNotFoundException {
        Enquiry enquiry = EnquiryRepository.getInstance().getByID(enquiryID);
        if (enquiry != null) {
            EnquiryRepository.getInstance().remove(enquiryID);
        } else {
            throw new ModelNotFoundException("Enquiry with ID " + enquiryID + " not found");
        }
    }

    /**
     * Sets the answer for a specific enquiry and marks it as answered.
     *
     * @param enquiryID The ID of the enquiry to answer.
     * @param answer    The answer text.
     * @throws ModelNotFoundException If no enquiry with the specified ID is found.
     */
    public static void answerEnquiry(String enquiryID, String answer) throws ModelNotFoundException {
        Enquiry enquiry = EnquiryRepository.getInstance().getByID(enquiryID);
        if (enquiry != null) {
            enquiry.setAnswer(answer);
            enquiry.setAnswered(true);
            EnquiryRepository.getInstance().update(enquiry);
        } else {
            throw new ModelNotFoundException("Enquiry with ID " + enquiryID + " not found");
        }
    }

    /**
     * Retrieves a list of all enquiries from the repository.
     *
     * @return A list containing all {@link Enquiry} objects.
     */
    public static List<Enquiry> getAllEnquiries() {
        return EnquiryRepository.getInstance().getAll();
    }

    /**
     * Retrieves all enquiries that have been answered.
     * @return List of answered {@link Enquiry} objects.
     */
    public static List<Enquiry> getAnsweredEnquiries() {
        List<Enquiry> allEnquiries = EnquiryRepository.getInstance().getAll();
        List<Enquiry> answeredEnquiries = new ArrayList<>();

        for (Enquiry enquiry : allEnquiries) {
            if (enquiry.getAnswered()) {
                answeredEnquiries.add(enquiry);
            }
        }

        return answeredEnquiries;
    }

    /**
     * Retrieves all enquiries that have not been answered.
     * @return List of unanswered {@link Enquiry} objects.
     */
    public static List<Enquiry> getUnansweredEnquiries() {
        List<Enquiry> allEnquiries = EnquiryRepository.getInstance().getAll();
        List<Enquiry> unansweredEnquiries = new ArrayList<>();

        for (Enquiry enquiry : allEnquiries) {
            if (!enquiry.getAnswered()) {
                unansweredEnquiries.add(enquiry);
            }
        }

        return unansweredEnquiries;
    }
}
